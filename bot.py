import discord
import os
import asyncio

from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv

load_dotenv()

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# KONFIGURAƒåN√â KONSTANTY
AUTHORIZED_ROLE = "Team Mod"
ADMIN_ROLE = "Admin"
CATEGORY_ID = 1231260260015149068
ARCHIVE_CATEGORY_ID = 1077174157416087602
COMMAND_CHANNEL_ID = 819184838274711582  # zadaj ID channelu kde sa pou≈æ√≠vaj√∫ pr√≠kazy
HOW_TO_CHANNEL_ID = 1278324331683778722  # p√¥vodn√Ω console channel, teraz how_to
MODERATOR_CHANNEL_ID = 1026422525464424519
CHANNEL_NAME_TEMPLATE = "{emoji}„Éª{name}"
ARCHIVE_NAME_TEMPLATE = "{archived_date}_{name}"
ARCHIVE_EMOJI = "‚úÖ"
REACTION_EMOJI = "<:3horky:1377264806905516053>"  # nahraƒè svoj custom emoji ID
AUTO_REACT_CHANNELS = set()  # dynamicky upravovan√Ω zoznam

async def keep_alive_loop():  # Aby Google nevypol VM pre neƒçinnos≈•
    while True:
        print("Heartbeat - bot je na≈æive")
        await asyncio.sleep(300)  # ka≈æd√Ωch 5 min√∫t

@bot.event
async def on_ready():
    print(f"Bot prihl√°sen√Ω ako {bot.user}")
    bot.loop.create_task(keep_alive_loop())

    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} command(s)")
    except Exception as e:
        print(e)

    # Odo≈°li n√°vod do how_to len ak tam e≈°te nie je
    how_to_channel = bot.get_channel(HOW_TO_CHANNEL_ID)
    if how_to_channel:
        history = [msg async for msg in how_to_channel.history(limit=10)]
        if not any("Pou≈æ√≠vanie bota" in msg.content for msg in history if msg.author == bot.user):
            await how_to_channel.send(
                "üì¨ **Pou≈æ√≠vanie bota**\n\n"
                "**Vytvorenie kan√°la:**\n"
                "Spusti pr√≠kaz `/vytvor_channel` v kan√°li <#819184838274711582> a zadaj:\n"
                "- `emoji`: napr. üè´ alebo üìö\n"
                "- `name`: vlastn√Ω n√°zov\n"
                "- `uzivatelia`: oznaƒç @men√° v≈°etk√Ωch, ktor√Ωch chce≈° prida≈• (oddelen√Ωch medzerami)\n"
                "- `rola`: voliteƒæn√° rola, ktor√° m√° ma≈• pr√≠stup\n\n"
                "**Archiv√°cia kan√°la:**\n"
                "Spusti pr√≠kaz `/archivuj_channel` v tom kan√°li, ktor√Ω chce≈° archivova≈•.\n"
                "Pridaj d√¥vod a d√°tum (napr. `2025_06`).\n"
                "Tvoja po≈æiadavka bude odoslan√° administr√°torom, ktor√≠ ju schv√°lia alebo zamietnu."
            )

# Pomocn√° funkcia: kontrola, ƒçi sme v kan√°li console
def only_in_command_channel():
    async def predicate(interaction: discord.Interaction):
        return interaction.channel.id == COMMAND_CHANNEL_ID
    return app_commands.check(predicate)

@bot.tree.command(name="pridaj_autoemoji_channel", description="Prid√° channel do zoznamu, kde bot automaticky reaguje")
@app_commands.describe(channel="Channely, kde sa maj√∫ prid√°va≈• automatick√© reakcie o preƒç√≠tan√≠.")
async def pridaj_autoemoji_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    author = interaction.user
    if not discord.utils.get(author.roles, name=ADMIN_ROLE):
        await interaction.response.send_message("Len admin m√¥≈æe meni≈• zoznam auto-emoji kan√°lov.", ephemeral=True)
        return
    AUTO_REACT_CHANNELS.add(channel.id)
    await interaction.response.send_message(f"Kan√°l {channel.mention} bol pridan√Ω do auto-emoji zoznamu.", ephemeral=True)

@bot.tree.command(name="odober_autoemoji_channel", description="Odoberie channel zo zoznamu auto reakci√≠ o preƒç√≠tan√≠")
@app_commands.describe(channel="Kan√°l, z ktor√©ho sa maj√∫ automatick√© reakcie o preƒç√≠tan√≠ odstr√°ni≈•")
async def odober_autoemoji_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    author = interaction.user
    if not discord.utils.get(author.roles, name=ADMIN_ROLE):
        await interaction.response.send_message("Len admin m√¥≈æe meni≈• zoznam auto-emoji kan√°lov.", ephemeral=True)
        return
    AUTO_REACT_CHANNELS.discard(channel.id)
    await interaction.response.send_message(f"Kan√°l {channel.mention} bol odstr√°nen√Ω zo zoznamu.", ephemeral=True)

@bot.tree.command(name="zoznam_autoemoji_channelov", description="Zobraz√≠ zoznam channelov s automatick√Ωmi reakciami")
async def zoznam_autoemoji_channelov(interaction: discord.Interaction):
    if not AUTO_REACT_CHANNELS:
        await interaction.response.send_message("Nie je nastaven√Ω ≈æiadny kan√°l na automatick√© reakcie.", ephemeral=True)
        return
    guild = interaction.guild
    channels = [guild.get_channel(cid) for cid in AUTO_REACT_CHANNELS if guild.get_channel(cid)]
    response = "\n".join(f"- {channel.mention}" for channel in channels)
    await interaction.response.send_message("Kan√°ly s automatick√Ωmi reakciami:\n" + response, ephemeral=True)

@bot.event
async def on_message(message):
    await bot.process_commands(message)

    if message.author.bot:
        return

    # Reaguj, ak je to v automatickom channeli
    if message.channel.id in AUTO_REACT_CHANNELS:
        await message.add_reaction(REACTION_EMOJI)

    # Alebo ak bot bol otagovan√Ω
    elif bot.user.mentioned_in(message):
        await message.add_reaction(REACTION_EMOJI)


@bot.tree.command(name="vytvor_channel", description="Vytvor√≠ s√∫kromn√Ω kan√°l")
@app_commands.describe(
    emoji="Emoji pre n√°zov kan√°la",
    name="N√°zov kan√°la",
    uzivatelia="Oznaƒç pou≈æ√≠vateƒæov (oddelen√Ωch medzerou)",
    rola="Voliteƒæn√° rola, ktor√° bude ma≈• pr√≠stup"
)
@only_in_command_channel()
async def vytvor_channel(
    interaction: discord.Interaction,
    emoji: str,
    name: str,
    uzivatelia: str,
    rola: discord.Role = None
):
    author = interaction.user
    guild = interaction.guild

    if not discord.utils.get(author.roles, name=AUTHORIZED_ROLE):
        await interaction.response.send_message("Nem√°≈° opr√°vnenie na vytv√°ranie kan√°lov.", ephemeral=True)
        return

    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        author: discord.PermissionOverwrite(
            read_messages=True,
            manage_messages=True,
            manage_channels=True,
            manage_roles=True,
            view_channel=True
        ),
    }

    mentions = uzivatelia.split()
    for mention in mentions:
        if mention.startswith("<@") and mention.endswith(">"):
            user_id = int(mention.strip("<@!>"))
            member = guild.get_member(user_id)
            if member:
                overwrites[member] = discord.PermissionOverwrite(read_messages=True)

    if rola:
        overwrites[rola] = discord.PermissionOverwrite(read_messages=True)

    category = guild.get_channel(CATEGORY_ID)
    channel_name = CHANNEL_NAME_TEMPLATE.format(emoji=emoji, name=name)

    channel = await guild.create_text_channel(channel_name, overwrites=overwrites, category=category)
    await interaction.response.send_message(f"Kan√°l {channel.mention} bol vytvoren√Ω.", ephemeral=True)

@bot.event
async def setup_hook():
    how_to_channel = bot.get_channel(HOW_TO_CHANNEL_ID)
    if how_to_channel:
        await how_to_channel.send(
            "\U0001F4AC **Pou≈æ√≠vanie bota**\n"
            "\n**Vytvorenie kan√°la:**\n"
            "Spusti pr√≠kaz `/vytvor_channel` v kan√°li <#819184838274711582> a zadaj: \n"
            "- `emoji`: napr. \U0001F3EB alebo \U0001F4DA alebo ktor√©koƒævek in√©, ktor√© sa ti p√°ƒçi. \n"
            "- `name`: vlastn√Ω n√°zov (na na≈°om serveri namiesto medzier pou≈æ√≠vame '_') \n"
            "- `uzivatelia`: oznaƒç @men√° v≈°etk√Ωch, ktor√Ωch chce≈° prida≈• (oddelen√Ωch medzerami) \n"
            "- `rola`: voliteƒæn√° rola, ktor√° m√° ma≈• pr√≠stup\n"
            "\n**Archiv√°cia kan√°la:**\n"
            "Spusti pr√≠kaz `/archivuj_channel` v tom kan√°li, ktor√Ω chce≈° archivova≈•.\n"
            "Pridaj d√¥vod a d√°tum (napr. `2025_06`).\n"
            "Tvoja po≈æiadavka bude odoslan√° administr√°torom, ktor√≠ ju schv√°lia alebo zamietnu."
        )

@bot.tree.command(name="archivuj_channel", description="Archivuje aktu√°lny kan√°l")
@app_commands.describe(datum="D√°tum archiv√°cie vo form√°te RRRR_MM alebo RRRR_MM_DD", dovod="Kr√°tky d√¥vod archiv√°cie")
async def archivuj_channel(interaction: discord.Interaction, datum: str, dovod: str):
    author = interaction.user
    guild = interaction.guild
    channel = interaction.channel
    mod_channel = guild.get_channel(MODERATOR_CHANNEL_ID)

    is_admin = discord.utils.get(author.roles, name=ADMIN_ROLE)
    is_team_mod = discord.utils.get(author.roles, name=AUTHORIZED_ROLE)

    if not is_admin and not is_team_mod:
        await interaction.response.send_message("Nem√°≈° opr√°vnenie na archiv√°ciu alebo oznaƒçenie.", ephemeral=True)
        return

    if is_admin:
        parts = channel.name.split("„Éª", 1)
        base_name = parts[1] if len(parts) == 2 else channel.name
        new_name = f"{datum}_{base_name}"

        archive_category = guild.get_channel(ARCHIVE_CATEGORY_ID)
        await channel.edit(name=new_name, category=archive_category, sync_permissions=True)
        await interaction.response.send_message(f"Kan√°l bol archivovan√Ω ako `{new_name}`.", ephemeral=True)

        embed = discord.Embed(title="‚úÖ Kan√°l archivovan√Ω", color=0x2ecc71)
        embed.add_field(name="Kan√°l", value=channel.mention, inline=False)
        embed.add_field(name="Archivoval", value=author.mention, inline=True)
        embed.add_field(name="D√¥vod", value=dovod, inline=False)
        await mod_channel.send(embed=embed)

    else:
        await interaction.response.send_message("Tvoj n√°vrh na archiv√°ciu bol odoslan√Ω moder√°torom.", ephemeral=True)

        embed = discord.Embed(title="‚ö†Ô∏è Oznaƒçenie kan√°la na archiv√°ciu", color=0xf39c12)
        embed.add_field(name="Kan√°l", value=channel.mention, inline=False)
        embed.add_field(name="Navrhovateƒæ", value=author.mention, inline=True)
        embed.add_field(name="D√¥vod", value=dovod, inline=False)
        message = await mod_channel.send(embed=embed)
        await message.add_reaction(ARCHIVE_EMOJI)

        async def check(reaction, user):
            return (
                str(reaction.emoji) == ARCHIVE_EMOJI and
                user != bot.user and
                discord.utils.get(user.roles, name=ADMIN_ROLE)
            )

        async def wait_for_reaction():
            try:
                reaction, user = await bot.wait_for("reaction_add", check=check, timeout=86400)
                parts = channel.name.split("„Éª", 1)
                base_name = parts[1] if len(parts) == 2 else channel.name
                new_name = f"{datum}_{base_name}"
                archive_category = guild.get_channel(ARCHIVE_CATEGORY_ID)
                await channel.edit(name=new_name, category=archive_category, sync_permissions=True)
                confirmation = discord.Embed(title="‚úÖ Archiv√°cia potvrden√°", color=0x2ecc71)
                confirmation.add_field(name="Kan√°l", value=channel.mention, inline=False)
                confirmation.add_field(name="Archivoval", value=user.mention, inline=True)
                confirmation.add_field(name="D√¥vod", value=f"Vyhovenie ≈æiadosti na archiv√°ciu od {author.mention}", inline=False)
                await mod_channel.send(embed=confirmation)
            except asyncio.TimeoutError:
                pass

        bot.loop.create_task(wait_for_reaction())

bot.run(os.getenv("DISCORD_TOKEN"))
